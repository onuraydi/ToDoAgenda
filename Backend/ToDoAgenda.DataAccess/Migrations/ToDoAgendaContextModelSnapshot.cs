// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToDoAgenda.DataAccess.Concrete.EntityFrameworkCore;

#nullable disable

namespace ToDoAgenda.DataAccess.Migrations
{
    [DbContext(typeof(ToDoAgendaContext))]
    partial class ToDoAgendaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.DefinedTask", b =>
                {
                    b.Property<int>("DefinedTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DefinedTaskId"));

                    b.Property<int>("importanceLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("resultId")
                        .HasColumnType("integer");

                    b.Property<int>("taskId")
                        .HasColumnType("integer");

                    b.Property<int>("timerId")
                        .HasColumnType("integer");

                    b.HasKey("DefinedTaskId");

                    b.HasIndex("importanceLevelId");

                    b.HasIndex("resultId");

                    b.HasIndex("taskId");

                    b.HasIndex("timerId");

                    b.ToTable("DefinedTasks");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ImportanceLevel", b =>
                {
                    b.Property<int>("importanceLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("importanceLevelId"));

                    b.Property<int>("importanceLevelDegree")
                        .HasColumnType("integer");

                    b.HasKey("importanceLevelId");

                    b.ToTable("ImportanceLevels");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.Result", b =>
                {
                    b.Property<int>("resultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("resultId"));

                    b.Property<int>("resultTypeId")
                        .HasColumnType("integer");

                    b.HasKey("resultId");

                    b.HasIndex("resultTypeId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultType", b =>
                {
                    b.Property<int>("resultTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("resultTypeId"));

                    b.Property<int>("examTrialId")
                        .HasColumnType("integer");

                    b.Property<int>("netId")
                        .HasColumnType("integer");

                    b.Property<int>("otherTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("testQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("themeId")
                        .HasColumnType("integer");

                    b.HasKey("resultTypeId");

                    b.HasIndex("examTrialId");

                    b.HasIndex("netId");

                    b.HasIndex("otherTypeId");

                    b.HasIndex("testQuestionId");

                    b.HasIndex("themeId");

                    b.ToTable("ResultTypes");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.ExamTrial", b =>
                {
                    b.Property<int>("examTrialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("examTrialId"));

                    b.Property<int>("netId")
                        .HasColumnType("integer");

                    b.HasKey("examTrialId");

                    b.HasIndex("netId");

                    b.ToTable("ExamTrial");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.Net", b =>
                {
                    b.Property<int>("netId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("netId"));

                    b.Property<int>("falseCount")
                        .HasColumnType("integer");

                    b.Property<float>("totalNet")
                        .HasColumnType("real");

                    b.Property<int>("totalQuestionCount")
                        .HasColumnType("integer");

                    b.Property<int>("trueCount")
                        .HasColumnType("integer");

                    b.HasKey("netId");

                    b.ToTable("Net");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.OtherType", b =>
                {
                    b.Property<int>("otherTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("otherTypeId"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("otherTypeId");

                    b.ToTable("OtherType");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.TestQuestion", b =>
                {
                    b.Property<int>("testQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("testQuestionId"));

                    b.Property<int>("falseCount")
                        .HasColumnType("integer");

                    b.Property<int>("totalQuestionCount")
                        .HasColumnType("integer");

                    b.Property<int>("trueCount")
                        .HasColumnType("integer");

                    b.HasKey("testQuestionId");

                    b.ToTable("TestQuestion");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.Theme", b =>
                {
                    b.Property<int>("themeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("themeId"));

                    b.Property<string>("themeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("themeId");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettingId"));

                    b.HasKey("SettingId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.Task", b =>
                {
                    b.Property<int>("taskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("taskId"));

                    b.Property<string>("taskDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("taskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("taskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.Timer", b =>
                {
                    b.Property<int>("timerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("timerId"));

                    b.Property<TimeSpan>("completeTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("targetTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("totalBreakTime")
                        .HasColumnType("interval");

                    b.HasKey("timerId");

                    b.ToTable("Timers");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.DefinedTask", b =>
                {
                    b.HasOne("TODoAgenda.Entities.Concrete.ImportanceLevel", "importanceLevel")
                        .WithMany()
                        .HasForeignKey("importanceLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.Result", "result")
                        .WithMany()
                        .HasForeignKey("resultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.Task", "task")
                        .WithMany()
                        .HasForeignKey("taskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.Timer", "timer")
                        .WithMany()
                        .HasForeignKey("timerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("importanceLevel");

                    b.Navigation("result");

                    b.Navigation("task");

                    b.Navigation("timer");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.Result", b =>
                {
                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultType", null)
                        .WithMany("results")
                        .HasForeignKey("resultTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultType", b =>
                {
                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.ExamTrial", "examTrial")
                        .WithMany()
                        .HasForeignKey("examTrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.Net", "net")
                        .WithMany()
                        .HasForeignKey("netId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.OtherType", "otherType")
                        .WithMany()
                        .HasForeignKey("otherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.TestQuestion", "testQuestion")
                        .WithMany()
                        .HasForeignKey("testQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.Theme", "theme")
                        .WithMany()
                        .HasForeignKey("themeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("examTrial");

                    b.Navigation("net");

                    b.Navigation("otherType");

                    b.Navigation("testQuestion");

                    b.Navigation("theme");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.ExamTrial", b =>
                {
                    b.HasOne("TODoAgenda.Entities.Concrete.ResultEntities.ResultTypes.Net", "net")
                        .WithMany()
                        .HasForeignKey("netId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("net");
                });

            modelBuilder.Entity("TODoAgenda.Entities.Concrete.ResultEntities.ResultType", b =>
                {
                    b.Navigation("results");
                });
#pragma warning restore 612, 618
        }
    }
}
